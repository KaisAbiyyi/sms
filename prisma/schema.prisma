// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Quote {
  id    String @id @default(uuid())
  quote String @db.Text
}

enum Role {
  superuser
  admin
  teacher
  student
}

model User {
  id         String       @id @default(uuid())
  name       String
  username   String       @unique
  email      String       @unique
  role       Role         @default(student)
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Student    Student?
  Teacher    Teacher?
  User_Token User_Token[]
}

model User_Token {
  id        String   @id @default(uuid())
  User      User     @relation(fields: [UserId], references: [id])
  UserId    String
  token     String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id      String    @id
  Student Student[]
  Class   Class[]
}

model Department {
  id      String    @id @default(uuid())
  name    String
  Student Student[]
  Class   Class[]
}

model Class {
  id           String      @id @default(uuid())
  name         String
  Student      Student[]
  Grade        Grade?      @relation(fields: [GradeId], references: [id])
  GradeId      String?
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
}

model Student {
  id                 String            @id @default(uuid())
  studentNumber      String            @unique
  name               String
  User               User              @relation(fields: [UserId], references: [id])
  UserId             String            @unique
  Grade              Grade             @relation(fields: [GradeId], references: [id])
  GradeId            String
  Department         Department        @relation(fields: [DepartmentId], references: [id])
  DepartmentId       String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  Result             Result[]
  Class   Class? @relation(fields: [ClassId], references: [id])
  ClassId String?
}

model Teacher {
  id              String            @id @default(uuid())
  teacherNumber   String            @unique
  name            String
  User            User              @relation(fields: [UserId], references: [id])
  UserId          String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Subject_Teacher Subject_Teacher[]
}

model Subject {
  id                String              @id @default(uuid())
  name              String
  Subject_Teacher   Subject_Teacher[]
  Learning_Material Learning_Material[]
  Task              Task[]
  Test              Test[]
}

model Subject_Teacher {
  id        String   @id @default(uuid())
  Teacher   Teacher? @relation(fields: [TeacherId], references: [id])
  TeacherId String?
  Subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?
}

model Learning_Material {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  file        String
  Subject     Subject  @relation(fields: [SubjectId], references: [id])
  SubjectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String        @id @default(uuid())
  title       String
  description String        @db.Text
  deadline    DateTime
  file        String
  Subject     Subject       @relation(fields: [SubjectId], references: [id])
  SubjectId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Task_Report Task_Report[]
}

model Task_Report {
  id        String   @id @default(uuid())
  file      String
  Task      Task     @relation(fields: [TaskId], references: [id])
  TaskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  chances     Int
  deadline    DateTime
  Subject     Subject  @relation(fields: [SubjectId], references: [id])
  SubjectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Result      Result[]
}

model Question {
  id            String          @id @default(uuid())
  title         String
  image         String
  description   String          @db.Text
  Choice        Choice[]
  Result_Detail Result_Detail[]
}

model Choice {
  id            String          @id @default(uuid())
  name          String
  isRight       Boolean
  Question      Question        @relation(fields: [QuestionId], references: [id])
  QuestionId    String
  Result_Detail Result_Detail[]
}

model Result {
  id            String          @id @default(uuid())
  Test          Test            @relation(fields: [TestId], references: [id])
  TestId        String
  Student       Student         @relation(fields: [StudentId], references: [id])
  StudentId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Result_Detail Result_Detail[]
}

model Result_Detail {
  id         String   @id @default(uuid())
  isRight    Boolean
  Result     Result   @relation(fields: [ResultId], references: [id])
  ResultId   String
  Question   Question @relation(fields: [QuestionId], references: [id])
  QuestionId String
  Choice     Choice   @relation(fields: [ChoiceId], references: [id])
  ChoiceId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
